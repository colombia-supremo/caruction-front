{"version":3,"sources":["redux/index.ts","services/http-service.ts","components/form/text-field.tsx","redux/thunk.ts","pages/login/index.tsx","components/form/checkbox-field.tsx","pages/registration/index.tsx","components/form/date-field.tsx","components/form/select-field.tsx","App.tsx","pages/profile/index.tsx","index.tsx"],"names":["history","client","cancelToken","isConnected","addBearerTokenInRequest","request","userCredentials","localStorage","getItem","undefined","params","Object","keys","includes","sessionID","this","axios","create","baseURL","setInterceptors","url","body","config","post","get","delete","patch","data","login","password","response","bodyFormData","FormData","forEach","k","set","headers","interceptors","use","err","Promise","reject","createBrowserHistory","LOADING","SET_PERSONAL_DETAILS","initialState","loading","personalDetails","root","state","action","type","payload","store","createStore","combineReducers","router","connectRouter","compose","applyMiddleware","thunkMiddleware","withExtraArgument","api","routerMiddleware","Input","props","name","disabled","className","label","containerStyle","inputStyle","fullWidth","variant","size","min","useField","field","meta","TextField","error","helperText","style","inputProps","register","dispatch","getState","a","formattedData","agreement","console","log","getProfile","Auth","useDispatch","validationSchema","yup","shape","username","required","position","top","right","bottom","left","display","alignItems","justifyContent","backgroundColor","Paper","elevation","width","height","padding","textAlign","boxSizing","onSubmit","formValues","setItem","push","initialValues","formikProps","isSubmitting","isValid","dirty","handleSubmit","isSubmitDisabled","flex","flexDirection","Typography","noWrap","marginBottom","fontSize","color","Button","marginTop","CheckboxField","FormControlLabel","control","Checkbox","Registration","i","matches","f","o","email","DateField","helpers","DatePicker","disableFuture","openTo","format","views","onChange","date","setValue","paddingTop","SelectField","children","onChangeSideEffect","FormControl","marginRight","InputLabel","Select","e","readOnly","length","routes","id","path","component","profile","useSelector","useEffect","handleResendPhone","resendPhone","handleResendEmail","resendEmail","birthdate","phone","sex","newEmail","newPhone","passport","bornPlace","issueAuthority","issueAuthorityCode","issueDate","number","ser","Date","passportDetails","validationSchemas","max","onClick","removeItem","startEmailUpdate","enableReinitialize","errors","minWidth","startPhoneUpdate","rest","birthdateMonth","getMonth","toString","birthdateDay","getDate","formatted","getFullYear","updatePersonalDetails","MenuItem","value","issueDateMonth","issueDateDay","updatePassportDetails","values","App","credentials","utils","DateFnsUtils","locale","ruLocale","map","r","exact","from","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e302b32.chunk.js","sourcesContent":["import {\n  AnyAction,\n  applyMiddleware,\n  createStore,\n  combineReducers,\n  ReducersMapObject,\n  compose\n} from 'redux';\nimport {connectRouter, routerMiddleware} from 'connected-react-router';\nimport thunkMiddleware from 'redux-thunk';\nimport api from '../services/http-service';\nimport {createBrowserHistory} from 'history';\n\nexport const history = createBrowserHistory();\n\nexport interface ApplicationState {\n  loading: boolean,\n}\n\nconst LOADING = 'LOADING';\nconst SET_PERSONAL_DETAILS = 'SET_PERSONAL_DETAILS';\n\nexport const setLoading = (value: boolean): AnyAction => ({\n  type: LOADING,\n  payload: value,\n});\n\nexport const setPersonalDetails = (data: any): AnyAction => ({\n  type: SET_PERSONAL_DETAILS,\n  payload: data,\n});\n\nconst initialState = {\n  loading: false,\n  personalDetails: {}\n};\n\nconst root = (state: any = initialState, action: any) => {\n  switch (action.type) {\n    case LOADING:\n      return {...state, loading: action.payload};\n    case SET_PERSONAL_DETAILS:\n      return {...state, personalDetails: action.payload};\n  }\n\n  return state;\n};\n\nconst createReducer = (history: any) => combineReducers<ReducersMapObject>({\n  router: connectRouter(history),\n  root\n} as any);\n\nconst store = createStore(\n  createReducer(history),\n  compose(\n    applyMiddleware(\n      thunkMiddleware.withExtraArgument(api),\n      routerMiddleware(history)\n    )\n  ),\n)\n\nexport default store;","import {AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelTokenSource} from 'axios';\nimport axios from \"axios\";\n\nexport class HttpService {\n    private client: AxiosInstance;\n    private cancelToken: CancelTokenSource | null = null;\n    public isConnected = false;\n\n    constructor() {\n        this.client = axios.create({\n            baseURL: 'https://caruction.ru/'\n        });\n\n        this.setInterceptors();\n    }\n\n    post(url: string, body: object, config?: AxiosRequestConfig): Promise<AxiosResponse> {\n        return this.client.post(url, body, config);\n    }\n\n    get(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse> {\n        return this.client.get(url, config);\n    }\n\n    delete(url: string): Promise<AxiosResponse> {\n        return this.client.delete(url);\n    }\n\n    patch(url: string, body: object): Promise<AxiosResponse> {\n        return this.client.patch(url, body);\n    }\n\n    getAxios(): AxiosInstance {\n        return this.client;\n    }\n\n    public async login(data: any): Promise<any> {\n        const url = 'api/account/login';\n\n        // var bodyFormData = new FormData();\n        \n        // Object.keys(data).forEach((k: string) => {\n        //     bodyFormData.set(k, data[k]);\n        // });\n\n        const response = await this.get(\n            url,\n            // bodyFormData,\n            {\n                // headers: {\n                //     'Content-Type': 'multipart/form-data'\n                // },\n                params: {\n                    login: data.login,\n                    password: data.password\n                }\n            }\n        );\n\n        return response.data;\n    }\n\n    public async register(data: any): Promise<any> {\n        const url = 'api/account/register';\n\n        var bodyFormData = new FormData();\n        \n        Object.keys(data).forEach((k: string) => {\n            bodyFormData.set(k, data[k]);\n        });\n\n        const response = await this.post(\n            url,\n            bodyFormData, \n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n        );\n\n        return response.data;\n    }\n\n    public async getProfile(): Promise<any> {\n        const url = 'api/account/personal_data';\n\n        const response = await this.get(url);\n\n        return response.data;\n    }\n\n    public async resendPhone(): Promise<any> {\n        const url = 'api/account/resend_phone_code';\n\n        const response = await this.get(url);\n\n        return response.data;\n    }\n\n    public async resendEmail(): Promise<any> {\n        const url = 'api/account/resend_email_code';\n\n        const response = await this.get(url);\n\n        return response.data;\n    }\n\n    public async startEmailUpdate(data: any): Promise<any> {\n        const url = 'api/account/start_email_change';\n\n        var bodyFormData = new FormData();\n        \n        Object.keys(data).forEach((k: string) => {\n            bodyFormData.set(k, data[k]);\n        });\n\n        const response = await this.post(\n            url,\n            bodyFormData, \n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n        );\n\n        return response.data;\n    }\n\n    public async startPhoneUpdate(data: any): Promise<any> {\n        const url = 'api/account/start_phone_change';\n\n        var bodyFormData = new FormData();\n        \n        Object.keys(data).forEach((k: string) => {\n            bodyFormData.set(k, data[k]);\n        });\n\n        const response = await this.post(\n            url,\n            bodyFormData, \n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n        );\n\n        return response.data;\n    }\n\n    public async updatePersonalDetails(data: any): Promise<any> {\n        const url = 'api/account/update_personal_data';\n\n        var bodyFormData = new FormData();\n        \n        Object.keys(data).forEach((k: string) => {\n            bodyFormData.set(k, data[k]);\n        });\n\n        const response = await this.post(\n            url,\n            bodyFormData, \n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n        );\n\n        return response.data;\n    }\n\n    public async updatePassportDetails(data: any): Promise<any> {\n        const url = 'api/account/update_passport_data';\n\n        var bodyFormData = new FormData();\n        \n        Object.keys(data).forEach((k: string) => {\n            bodyFormData.set(k, data[k]);\n        });\n\n        const response = await this.post(\n            url,\n            bodyFormData, \n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n        );\n\n        return response.data;\n    }\n\n    private addBearerTokenInRequest = (request: AxiosRequestConfig): AxiosRequestConfig => {\n        const userCredentials = localStorage.getItem('userCredentials');\n        if (typeof userCredentials !== undefined && !(request.params && Object.keys(request.params).includes('login'))) {\n            request.params = {\n                ...(request?.params ? request.params : {}),\n                sessionID: userCredentials\n            };\n        }\n        return request;\n    };\n\n    private setInterceptors(): void {\n        this.client.interceptors.request.use(this.addBearerTokenInRequest);\n\n        this.client.interceptors.response.use(\n            (response: AxiosResponse) => response,\n            (err: AxiosError) => {\n                return Promise.reject(err);\n            }\n        );\n    }\n}\n\nexport default new HttpService();\n","import React, { FC } from 'react';\nimport { useField } from 'formik'\nimport {TextField} from \"@material-ui/core\";\n\ninterface InputInterface {\n  name: string;\n  type?: string;\n  disabled?: boolean;\n  className?: string;\n  label?: string;\n  containerStyle?: any;\n  inputStyle?: any;\n  fullWidth?: boolean;\n  variant?: 'standard' | 'filled' | 'outlined';\n  size?: 'small' | 'medium';\n  min?: number;\n}\n\nexport const Input: FC<InputInterface> = (props) => {\n  const {\n    name,\n    type = 'text',\n    disabled = false,\n    className,\n    label,\n    containerStyle,\n    inputStyle,\n    fullWidth = false,\n    variant,\n    size,\n    min\n  } = props;\n\n  const [field, meta] = useField(name);\n\n  return (\n    <TextField\n      {...field}\n      className={className}\n      label={label}\n      type={type}\n      variant={variant}\n      disabled={disabled}\n      error={!!meta.error}\n      helperText={meta.error}\n      fullWidth={fullWidth}\n      size={size}\n      style={containerStyle}\n      inputProps={{\n        min,\n        style: inputStyle\n      }}\n    />\n  );\n};\n\nexport default Input;\n","import { ThunkAction } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { ApplicationState } from '.';\nimport { HttpService } from \"../services/http-service\";\nimport { push } from 'connected-react-router'\nimport { setPersonalDetails } from './index';\n\nexport const logout = (): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n      try {\n        localStorage.removeItem('userCredentials');\n        dispatch(push('/login'));\n      } catch (error) {\n        console.log('error', error);\n      }\n    }\n);\n\nexport const register = (data: any): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            const formattedData = {\n                ...data,\n                agreement: data.agreement ? 'Y' : 'N'\n            }\n            \n            const res = await api.register(formattedData);\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n);\n\nexport const getProfile = (): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            const response = await api.getProfile();\n\n            dispatch(setPersonalDetails(response));\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n)\n\nexport const resendPhone = (): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            await api.resendPhone();\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n)\n\nexport const resendEmail = (): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            await api.resendEmail();\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n)\n\nexport const startEmailUpdate = (data: any): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            const response = await api.startEmailUpdate(data);\n\n            dispatch(getProfile());\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n)\n\nexport const startPhoneUpdate = (data: any): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            const response = await api.startPhoneUpdate(data);\n\n            dispatch(getProfile());\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n)\n\nexport const updatePersonalDetails = (data: any): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            const response = await api.updatePersonalDetails(data);\n\n            dispatch(getProfile());\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n)\n\nexport const updatePassportDetails = (data: any): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            const response = await api.updatePassportDetails(data);\n\n            dispatch(getProfile());\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n)\n\nexport const login = (login: string, password: string): ThunkAction<Promise<void>, ApplicationState, HttpService, AnyAction> => (\n    async (dispatch, getState, api): Promise<void> => {\n        try {\n            const response = await api.login(\n                {\n                    login,\n                    password\n                }\n            );\n\n            localStorage.setItem('userCredentials', response.sessionID);\n            dispatch(push('/profile'));\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n);\n","import React, {FC} from \"react\";\nimport {useDispatch} from 'react-redux';\nimport { Formik, FormikProps } from 'formik';\nimport {Button, Paper} from \"@material-ui/core\";\nimport Input from \"../../components/form/text-field\";\nimport Typography from '@material-ui/core/Typography';\nimport {login} from \"../../redux/thunk\";\nimport * as yup from 'yup';\n\ninterface LoginFormFields {\n    username: string;\n    password: string;\n}\n\nconst Auth: FC = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (formValues: LoginFormFields): void => {\n        dispatch(login(formValues.username, formValues.password));\n    };\n\n    let initialValues: LoginFormFields = {\n        username: '',\n        password: ''\n    };\n\n    let validationSchema = yup.object().shape({\n        username: yup.string().required('Обязательное поле'),\n        password: yup.string().required('Обязательное поле')\n    });\n\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: '#fafafa'\n            }}\n        >\n            <Paper\n                elevation={2}\n                style={{\n                    width: '360px',\n                    height: '370px',\n                    padding: '24px',\n                    textAlign: 'center',\n                    display: 'flex',\n                    boxSizing: 'border-box'\n                }}\n            >\n                <Formik\n                    onSubmit={handleSubmit}\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                >\n                    {(formikProps: FormikProps<LoginFormFields>): JSX.Element => {\n                        const {\n                        isSubmitting,\n                        isValid,\n                        dirty,\n                        handleSubmit,\n                        } = formikProps;\n                        const isSubmitDisabled = isSubmitting || !isValid || !dirty;\n\n                        return (\n                            <form\n                                onSubmit={handleSubmit}\n                                style={{\n                                    flex: '1 0 auto',\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    justifyContent: 'space-between'\n                                }}\n                            >\n                                <Typography\n                                    variant=\"h6\"\n                                    noWrap\n                                    style={{\n                                        marginBottom: '16px'\n                                    }}\n                                >\n                                    Пожалуйста, войдите\n                                </Typography>\n                                <Input\n                                    label=\"Имя пользователя\"\n                                    name=\"username\"\n                                    type=\"text\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%', fontSize: '16px', color: '#161616' }}\n                                />\n                                <Input\n                                    label=\"Пароль\"\n                                    name=\"password\"\n                                    type=\"password\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    type=\"submit\"\n                                    style={{\n                                        marginTop: 5,\n                                        width: '100%',\n                                        textAlign: 'center'\n                                    }}\n                                    disabled={isSubmitDisabled}\n                                >\n                                    Войти\n                                </Button>\n                            </form>\n                        );\n                    }}\n                </Formik>\n            </Paper>\n        </div>\n    );\n}\n\nexport default Auth;\n","import React, { FC } from 'react';\nimport { useField } from 'formik'\nimport {\n    FormControlLabel,\n    Checkbox\n} from \"@material-ui/core\";\n\ninterface InputInterface {\n  name: string;\n  disabled?: boolean;\n  className?: string;\n  label?: string;\n  containerStyle?: any;\n  inputStyle?: any;\n}\n\nexport const CheckboxField: FC<InputInterface> = (props) => {\n  const {\n    name,\n    disabled = false,\n    className,\n    label,\n    containerStyle,\n    inputStyle\n  } = props;\n\n  const [field, meta] = useField(name);\n\n  return (\n    <FormControlLabel\n      control={(\n        <Checkbox\n          {...field}\n          inputProps={{\n            style: inputStyle\n          }}\n        />\n      )}\n      label={label}\n      disabled={disabled}\n      className={className}\n      style={containerStyle}\n    />\n  );\n};\n\nexport default CheckboxField;\n","import React, {FC} from \"react\";\nimport {useDispatch} from 'react-redux';\nimport { Formik, FormikProps } from 'formik';\nimport {\n    Button,\n    Paper\n} from \"@material-ui/core\";\nimport Input from \"../../components/form/text-field\";\nimport Checkbox from \"../../components/form/checkbox-field\";\nimport Typography from '@material-ui/core/Typography';\nimport {register} from \"../../redux/thunk\";\nimport * as yup from 'yup';\n\ninterface RegistrationFormFields {\n    i: string;\n    f: string;\n    o: string;\n    email: string;\n    agreement: boolean;\n}\n\nconst Registration: FC = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = async (formValues: RegistrationFormFields): Promise<void> => {\n        dispatch(register(formValues));\n    };\n\n    let initialValues: RegistrationFormFields = {\n        i: '',\n        f: '',\n        o: '',\n        email: '',\n        agreement: true\n    };\n\n    let validationSchema = yup.object().shape({\n        i: yup.string().required('Обязательное поле').matches(/^[а-яА-ЯёЁ]+$/, 'Должно содержать только русские буквы'),\n        f: yup.string().required('Обязательное поле').matches(/^[а-яА-ЯёЁ]+$/, 'Должно содержать только русские буквы'),\n        o: yup.string().required('Обязательное поле').matches(/^[а-яА-ЯёЁ]+$/, 'Должно содержать только русские буквы'),\n        email: yup.string().required('Обязательное поле').matches(/^(?=((?=([А-Яа-яЁёa-zA-Z0-9]+))\\2(?=(([.+\\-_][А-Яа-яЁёa-zA-Z0-9]+)*))\\3))\\1@(((?=(((?=([А-Яа-яЁёa-zA-Z0-9]+))\\9(?=(([\\-][А-Яа-яЁёa-zA-Z0-9]+)*))\\10\\.)+)))\\7(?=([А-Яа-яЁёa-zA-Z]{2,}))\\12)$/, 'Нужен валидный адрес'),\n        agreement: yup.boolean(),\n    });\n\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: '#fafafa'\n            }}\n        >\n            <Paper\n                elevation={2}\n                style={{\n                    width: '360px',\n                    height: '370px',\n                    padding: '24px',\n                    textAlign: 'center',\n                    display: 'flex',\n                    boxSizing: 'border-box'\n                }}\n            >\n                <Formik\n                    onSubmit={handleSubmit}\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                >\n                    {(formikProps: FormikProps<RegistrationFormFields>): JSX.Element => {\n                        const {\n                        isSubmitting,\n                        isValid,\n                        dirty,\n                        handleSubmit,\n                        } = formikProps;\n                        const isSubmitDisabled = isSubmitting || !isValid || !dirty;\n\n                        return (\n                            <form\n                                onSubmit={handleSubmit}\n                                style={{\n                                    flex: '1 0 auto',\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    justifyContent: 'space-between'\n                                }}\n                            >\n                                <Typography\n                                    variant=\"h6\"\n                                    noWrap\n                                    style={{\n                                        marginBottom: '16px'\n                                    }}\n                                >\n                                    Регистрация пользователя\n                                </Typography>\n                                <Input\n                                    label=\"Имя\"\n                                    name=\"i\"\n                                    type=\"text\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%', fontSize: '16px', color: '#161616' }}\n                                />\n                                <Input\n                                    label=\"Фамилия\"\n                                    name=\"f\"\n                                    type=\"text\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Отчество\"\n                                    name=\"o\"\n                                    type=\"text\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Email\"\n                                    name=\"email\"\n                                    type=\"text\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Checkbox\n                                    label=\"Согласие\"\n                                    name=\"agreement\"\n                                    containerStyle={{ width: '100%' }}\n                                />\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    type=\"submit\"\n                                    style={{\n                                        marginTop: 5,\n                                        width: '100%',\n                                        textAlign: 'center'\n                                    }}\n                                    disabled={isSubmitDisabled}\n                                >\n                                    Зарегистрировать\n                                </Button>\n                            </form>\n                        );\n                    }}\n                </Formik>\n            </Paper>\n        </div>\n    );\n}\n\nexport default Registration;\n","import React, { FC } from 'react';\nimport { useField } from 'formik'\nimport { DatePicker } from '@material-ui/pickers';\n\ninterface InputInterface {\n  name: string;\n  type?: string;\n  disabled?: boolean;\n  className?: string;\n  label?: string;\n  containerStyle?: any;\n  inputStyle?: any;\n  fullWidth?: boolean;\n  variant?: 'standard' | 'filled' | 'outlined';\n  size?: 'small' | 'medium';\n}\n\nexport const DateField: FC<InputInterface> = (props) => {\n  const {\n    name,\n    disabled = false,\n    className,\n    label,\n    containerStyle,\n    inputStyle,\n    fullWidth = false,\n    variant,\n    size\n  } = props;\n\n  const [field, meta, helpers] = useField(name);\n\n  const handleDateChange = (date: any) => {\n    helpers.setValue(date);\n  };\n\n  return (\n    <DatePicker\n      {...field}\n      className={className}\n      label={label}\n      disabled={disabled}\n      error={!!meta.error}\n      helperText={meta.error}\n      fullWidth={fullWidth}\n      size={size}\n      disableFuture\n      openTo=\"year\"\n      format=\"dd/MM/yyyy\"\n      views={[\"year\", \"month\", \"date\"]}\n      onChange={handleDateChange}\n      style={containerStyle}\n      inputProps={{\n        variant,\n        style: {\n          paddingTop: '3px',\n          ...inputStyle\n        }\n      }}\n    />\n  );\n};\n\nexport default DateField;\n","import React, { FC } from 'react';\nimport {\n    Select,\n    InputLabel,\n    FormControl\n} from \"@material-ui/core\";\n\nimport { useField } from 'formik'\n\ninterface InputInterface {\n  name: string;\n  disabled?: boolean;\n  className?: string;\n  label?: string;\n  containerStyle?: any;\n  inputStyle?: any;\n  children?: any;\n  fullWidth?: boolean;\n  onChangeSideEffect?: () => void;\n  size?: 'small' | 'medium';\n}\n\nconst SelectField: FC<InputInterface> = (props: InputInterface) => {\n    const {\n        name,\n        disabled = false,\n        label,\n        containerStyle,\n        inputStyle,\n        children,\n        fullWidth = false,\n        onChangeSideEffect,\n        size\n    } = props;\n\n    const [field, meta] = useField(name);\n\n    return (\n        <FormControl\n            fullWidth={fullWidth}\n            size={size}\n            variant=\"outlined\"\n            style={{\n                ...containerStyle,\n                marginRight: '8px'\n            }}\n            disabled={disabled}\n        >\n            <InputLabel>\n                {label}\n            </InputLabel>\n            <Select\n                {...field}\n                onChange={(e) => {\n                    field.onChange(e);\n                    if (onChangeSideEffect) {\n                        onChangeSideEffect();\n                    }\n                }}\n                label={label}\n                readOnly={children.length < 2}\n                style={inputStyle}\n            >\n                {children}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default SelectField;\n","import React, {FC} from 'react';\nimport {ConnectedRouter} from 'connected-react-router';\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport ruLocale from \"date-fns/locale/ru\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport Auth from \"./pages/login\";\nimport Registration from \"./pages/registration\";\nimport Profile from \"./pages/profile\";\nimport {history} from './redux';\n\nconst routes = [\n    {id: 'login', path: '/login', component: Auth},\n    {id: 'registration', path: '/registration', component: Registration},\n    {id: 'profile', path: '/profile', component: Profile}\n];\n\nconst App: FC = () => {\n    const credentials: any = localStorage.getItem('userCredentials');\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ruLocale}>\n            <ConnectedRouter history={history as any}>\n                <Switch>\n                    {routes.map((r) => (\n                        <Route\n                            key={r.id}\n                            path={r.path}\n                            component={r.component}\n                        />\n                    ))}\n                    {\n                        credentials === null || credentials.length === 0\n                            ? <Redirect exact from=\"/\" to=\"/login\"/>\n                            : <Redirect exact from=\"*\" to=\"/profile\"/>\n                    }\n                </Switch>\n            </ConnectedRouter>\n        </MuiPickersUtilsProvider>\n    );\n}\n\nexport default App;\n","import React, {FC, useEffect} from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { Formik, FormikProps } from 'formik';\nimport {\n    Button,\n    MenuItem\n} from \"@material-ui/core\";\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport Input from \"../../components/form/text-field\";\nimport DatePicker from '../../components/form/date-field';\nimport SelectField from '../../components/form/select-field';\nimport Typography from '@material-ui/core/Typography';\nimport {\n    logout,\n    getProfile,\n    startEmailUpdate,\n    startPhoneUpdate,\n    updatePassportDetails,\n    updatePersonalDetails,\n    resendPhone,\n    resendEmail\n} from \"../../redux/thunk\";\nimport * as yup from 'yup';\n\nconst Profile: FC = () => {\n    const dispatch = useDispatch();\n    const profile = useSelector((state: any) => state.root.personalDetails);\n\n    useEffect(() => {\n        dispatch(getProfile());\n    }, []);\n\n    const submitEmail = (formValues: any): void => {\n        dispatch(startEmailUpdate(formValues));\n    };\n\n    const submitPhone = (formValues: any): void => {\n        dispatch(startPhoneUpdate(formValues));\n    };\n\n    const submitPersonalDetails = (formValues: any): void => {\n        const {\n            birthdate,\n            ...rest\n        } = formValues;\n\n        const birthdateMonth = (birthdate.getMonth() + 1).toString();\n        const birthdateDay = birthdate.getDate().toString();\n\n        const formatted = {\n            birthdate: `${birthdate.getFullYear()}-${\n                birthdateMonth.length > 1 ? birthdateMonth : '0' + birthdateMonth\n            }-${\n                birthdateDay.length > 1 ? birthdateDay : '0' + birthdateDay\n            }`,\n            ...rest\n        }\n\n        dispatch(updatePersonalDetails(formatted));\n    };\n\n    const submitPassportDetails = (formValues: any): void => {\n        const {\n            issueDate,\n            ...rest\n        } = formValues;\n\n        const issueDateMonth = (issueDate.getMonth() + 1).toString();\n        const issueDateDay = issueDate.getDate().toString();\n\n        const formatted = {\n            issueDate: `${issueDate.getFullYear()}-${\n                issueDateMonth.length > 1 ? issueDateMonth : '0' + issueDateMonth\n            }-${\n                issueDateDay.length > 1 ? issueDateDay : '0' + issueDateDay\n            }`,\n            ...rest\n        }\n        dispatch(updatePassportDetails(formatted));\n    };\n\n    const handleLogout = () => {\n        dispatch(logout());\n    }\n\n    const handleResendPhone = () => {\n        dispatch(resendPhone());\n    }\n\n    const handleResendEmail = () => {\n        dispatch(resendEmail());\n    }\n\n    const {\n        birthdate,\n        email,\n        phone,\n        sex,\n        f,\n        i,\n        o,\n        newEmail,\n        newPhone,\n    } = profile;\n\n    const {\n        bornPlace,\n        issueAuthority,\n        issueAuthorityCode,\n        issueDate,\n        number,\n        ser\n    } = profile?.passport || {};\n\n    let initialValues: any = {\n        email: {\n            email: email || ''\n        },\n        phone: {\n            phone: phone || ''\n        },\n        personalDetails: {\n            i: i || '',\n            f: f || '',\n            o: o || '',\n            sex: sex || '',\n            birthdate: birthdate ? new Date(birthdate) : new Date()\n        },\n        passportDetails: {\n            ser: ser || '',\n            number: number || '',\n            issueDate: issueDate ? new Date(issueDate) : new Date(),\n            issueAuthority: issueAuthority || '',\n            issueAuthorityCode: issueAuthorityCode || '',\n            bornPlace: bornPlace || ''\n        }\n    };\n\n    let validationSchemas = {\n        email: yup.object().shape({\n            email: yup.string().required('Обязательное поле').matches(/^(?=((?=([А-Яа-яЁёa-zA-Z0-9]+))\\2(?=(([.+\\-_][А-Яа-яЁёa-zA-Z0-9]+)*))\\3))\\1@(((?=(((?=([А-Яа-яЁёa-zA-Z0-9]+))\\9(?=(([\\-][А-Яа-яЁёa-zA-Z0-9]+)*))\\10\\.)+)))\\7(?=([А-Яа-яЁёa-zA-Z]{2,}))\\12)$/, 'Нужен валидный адрес')\n        }),\n        phone: yup.object().shape({\n            phone: yup.string().required('Обязательное поле').matches(/^[0-9]+$/, 'Должно содержать только цифры')\n        }),\n        personalDetails: yup.object().shape({\n            i: yup.string().required('Обязательное поле').matches(/^[а-яА-ЯёЁ]+$/, 'Должно содержать только русские буквы'),\n            f: yup.string().required('Обязательное поле').matches(/^[а-яА-ЯёЁ]+$/, 'Должно содержать только русские буквы'),\n            o: yup.string().required('Обязательное поле').matches(/^[а-яА-ЯёЁ]+$/, 'Должно содержать только русские буквы'),\n            sex: yup.string().required('Обязательное поле'),\n            birthdate: yup.date().required('Обязательное поле'),\n        }),\n        passportDetails: yup.object().shape({\n            ser: yup.string().required('Обязательное поле').matches(/^[0-9]+$/, 'Должно содержать только цифры').min(4, 'Должно содержать 4 цифры').max(4, 'Должно содержать 4 цифры'),\n            number: yup.string().required('Обязательное поле').matches(/^[0-9]+$/, 'Должно содержать только цифры').min(6, 'Должно содержать 6 цифр').max(6, 'Должно содержать 6 цифр'),\n            issueDate: yup.string().required('Обязательное поле'),\n            issueAuthority: yup.string().required('Обязательное поле'),\n            issueAuthorityCode: yup.string().required('Обязательное поле'),\n            bornPlace: yup.string().required('Обязательное поле'),\n        }),\n    };\n\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: '#fafafa'\n            }}\n        >\n            <Button\n                type=\"button\"\n                onClick={handleLogout}\n                style={{\n                    position: 'absolute',\n                    right: 0,\n                    top: 0\n                }}\n            >\n                Выйти\n            </Button>\n            <Typography\n                variant=\"h6\"\n                noWrap\n                style={{\n                    marginBottom: '16px'\n                }}\n            >\n                Информация о профиле\n            </Typography>\n\n            <Formik\n                onSubmit={submitEmail}\n                initialValues={initialValues.email}\n                enableReinitialize\n                validationSchema={validationSchemas.email}\n            >\n                {(formikProps: FormikProps<any>): JSX.Element => {\n                    const {\n                        isSubmitting,\n                        isValid,\n                        dirty,\n                        handleSubmit,\n                        errors\n                    } = formikProps;\n\n                    const isSubmitDisabled = isSubmitting || !isValid || !dirty;\n\n                    return (\n                        <form\n                            onSubmit={handleSubmit}\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                alignItems: 'flex-start',\n                                marginTop: 5,\n                                width: '800px'\n                            }}\n                        >\n                            <Input\n                                label=\"Email\"\n                                name=\"email\"\n                                type=\"text\"\n                                size=\"small\"\n                                containerStyle={{ marginRight: '8px', flex: '1 1 100px', height: '64px' }}\n                                inputStyle={{ width: '100%' }}\n                            />\n                            {newEmail && (\n                                <Button\n                                    onClick={handleResendEmail}\n                                    variant=\"contained\"\n                                    color=\"secondary\"\n                                    type=\"button\"\n                                    style={{\n                                        height: '40px',\n                                        width: '40px',\n                                        minWidth: '40px',\n                                        textAlign: 'center',\n                                        flex: '0 0 40px',\n                                        marginRight: '8px'\n                                    }}\n                                >\n                                    <RepeatIcon />\n                                </Button>\n                            )}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                type=\"submit\"\n                                style={{\n                                    height: '40px',\n                                    textAlign: 'center',\n                                    flex: '0 0 200px'\n                                }}\n                                disabled={isSubmitDisabled}\n                            >\n                                Сохранить\n                            </Button>\n                        </form>\n                    );\n                }}\n            </Formik>\n\n            <Formik\n                onSubmit={submitPhone}\n                initialValues={initialValues.phone}\n                enableReinitialize\n                validationSchema={validationSchemas.phone}\n            >\n                {(formikProps: FormikProps<any>): JSX.Element => {\n                    const {\n                        isSubmitting,\n                        isValid,\n                        dirty,\n                        handleSubmit\n                    } = formikProps;\n\n                    const isSubmitDisabled = isSubmitting || !isValid || !dirty;\n\n                    return (\n                        <form\n                            onSubmit={handleSubmit}\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                alignItems: 'flex-start',\n                                marginTop: 5,\n                                width: '800px'\n                            }}\n                        >\n                            <Input\n                                label=\"Телефон\"\n                                name=\"phone\"\n                                type=\"text\"\n                                size=\"small\"\n                                containerStyle={{ marginRight: '8px', flex: '1 1 100px', height: '64px' }}\n                                inputStyle={{ width: '100%' }}\n                            />\n                            {newPhone && (\n                                <Button\n                                    onClick={handleResendPhone}\n                                    variant=\"contained\"\n                                    color=\"secondary\"\n                                    type=\"button\"\n                                    style={{\n                                        height: '40px',\n                                        width: '40px',\n                                        minWidth: '40px',\n                                        textAlign: 'center',\n                                        flex: '0 0 40px',\n                                        marginRight: '8px'\n                                    }}\n                                >\n                                    <RepeatIcon />\n                                </Button>\n                            )}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                type=\"submit\"\n                                style={{\n                                    height: '40px',\n                                    textAlign: 'center',\n                                    flex: '0 0 200px'\n                                }}\n                                disabled={isSubmitDisabled}\n                            >\n                                Сохранить\n                            </Button>\n                        </form>\n                    );\n                }}\n            </Formik>\n\n            <div\n                style={{\n                    display: 'flex',\n                    width: '800px'\n                }}\n            >\n                <Formik\n                    onSubmit={submitPersonalDetails}\n                    initialValues={initialValues.personalDetails}\n                    enableReinitialize\n                    validationSchema={validationSchemas.personalDetails}\n                >\n                    {(formikProps: FormikProps<any>): JSX.Element => {\n                        const {\n                            isSubmitting,\n                            isValid,\n                            dirty,\n                            handleSubmit\n                        } = formikProps;\n\n                        const isSubmitDisabled = isSubmitting || !isValid || !dirty;\n\n                        return (\n                            <form\n                                onSubmit={handleSubmit}\n                                style={{\n                                    marginRight: '8px',\n                                    flex: '1 1 100px',\n                                    display: 'flex',\n                                    flexDirection: 'column'\n                                }}\n                            >\n                                <Typography\n                                    variant=\"h6\"\n                                    noWrap\n                                    style={{\n                                        marginBottom: '16px'\n                                    }}\n                                >\n                                    Личная информация\n                                </Typography>\n\n                                <Input\n                                    label=\"Имя\"\n                                    name=\"i\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px' }}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Фамилия\"\n                                    name=\"f\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px' }}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Отчество\"\n                                    name=\"o\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px' }}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <SelectField\n                                    label=\"Пол\"\n                                    name=\"sex\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px' }}\n                                    inputStyle={{ width: '100%' }}\n                                >\n                                    <MenuItem value=\"M\">Мужской</MenuItem>\n                                    <MenuItem value=\"F\">Женский</MenuItem>\n                                </SelectField>\n                                <DatePicker\n                                    label=\"Дата рождения\"\n                                    name=\"birthdate\"\n                                    containerStyle={{ width: '100%', height: '64px' }}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <div\n                                    style={{\n                                        flex: '1 0 auto',\n                                        marginTop: 5,\n                                        display: 'flex',\n                                        alignItems: 'flex-end'\n                                    }}\n                                >\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        type=\"submit\"\n                                        style={{\n                                            width: '100%',\n                                            textAlign: 'center'\n                                        }}\n                                        disabled={isSubmitDisabled}\n                                    >\n                                        Сохранить\n                                    </Button>\n                                </div>\n                            </form>\n                        );\n                    }}\n                </Formik>\n\n                <Formik\n                    onSubmit={submitPassportDetails}\n                    initialValues={initialValues.passportDetails}\n                    enableReinitialize\n                    validationSchema={validationSchemas.passportDetails}\n                >\n                    {(formikProps: FormikProps<any>): JSX.Element => {\n                        const {\n                            isSubmitting,\n                            isValid,\n                            dirty,\n                            handleSubmit,\n                            values\n                        } = formikProps;\n\n                        const isSubmitDisabled = isSubmitting || !isValid || !dirty;\n\n                        return (\n                            <form\n                                onSubmit={handleSubmit}\n                                style={{\n                                    flex: '1 1 100px',\n                                    display: 'flex',\n                                    flexDirection: 'column'\n                                }}\n                            >\n                                <Typography\n                                    variant=\"h6\"\n                                    noWrap\n                                    style={{\n                                        marginBottom: '16px'\n                                    }}\n                                >\n                                    Паспортные данные\n                                </Typography>\n\n                                <Input\n                                    label=\"Серия\"\n                                    name=\"ser\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px' }}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Номер\"\n                                    name=\"number\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <DatePicker\n                                    label=\"Дата выдачи\"\n                                    name=\"issueDate\"\n                                    containerStyle={{ width: '100%', height: '64px' }}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Орган выдачи\"\n                                    name=\"issueAuthority\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Код подразделения\"\n                                    name=\"issueAuthorityCode\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <Input\n                                    label=\"Место рождения\"\n                                    name=\"bornPlace\"\n                                    type=\"text\"\n                                    size=\"small\"\n                                    containerStyle={{ width: '100%', height: '64px'}}\n                                    inputStyle={{ width: '100%' }}\n                                />\n                                <div\n                                    style={{\n                                        flex: '1 0 auto',\n                                        marginTop: 5,\n                                        display: 'flex',\n                                        alignItems: 'flex-end'\n                                    }}\n                                >\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        type=\"submit\"\n                                        style={{\n                                            width: '100%',\n                                            textAlign: 'center'\n                                        }}\n                                        disabled={isSubmitDisabled}\n                                    >\n                                        Сохранить\n                                    </Button>\n                                </div>\n                            </form>\n                        );\n                    }}\n                </Formik>\n            </div>\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}><App/></Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}